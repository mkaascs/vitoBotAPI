<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Presentation</name>
    </assembly>
    <members>
        <member name="T:Presentation.Controllers.ChatsController">
            <summary>
            API Controller to interact with chats
            </summary>
            <param name="chatService">Required service to interact with chats</param>
        </member>
        <member name="M:Presentation.Controllers.ChatsController.#ctor(Application.Abstractions.IChatService)">
            <summary>
            API Controller to interact with chats
            </summary>
            <param name="chatService">Required service to interact with chats</param>
        </member>
        <member name="M:Presentation.Controllers.ChatsController.RegisterChat(Application.DTO.Commands.RegisterChatCommand,System.Threading.CancellationToken)">
            <summary>
            Register a new chat
            </summary>
            <param name="command">Instance of <see cref="T:Application.DTO.Commands.RegisterChatCommand"/> to register new chat</param>
            <param name="cancellationToken">Cancellation token</param>
            <response code="204">Chat was registered successfully</response>
            <response code="400">Command model is incorrect. Also return if chat with this id already exists</response>
        </member>
        <member name="M:Presentation.Controllers.ChatsController.GetChats(System.Threading.CancellationToken)">
            <summary>
            Get all registered chats
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <response code="200">Returns all registered chats</response>
        </member>
        <member name="T:Presentation.Controllers.MessageController">
            <summary>
            API Controller to interact with messages
            </summary>
            <param name="messageService">Required service to interact with messages</param>
        </member>
        <member name="M:Presentation.Controllers.MessageController.#ctor(Application.Abstractions.IMessageService)">
            <summary>
            API Controller to interact with messages
            </summary>
            <param name="messageService">Required service to interact with messages</param>
        </member>
        <member name="M:Presentation.Controllers.MessageController.AddMessage(System.String,Application.DTO.Commands.CreateMessageCommand,System.Threading.CancellationToken)">
            <summary>
            Adds new message in a specific chat
            </summary>
            <param name="id">ID of a specific chat</param>
            <param name="command">Instance of <see cref="T:Application.DTO.Commands.CreateMessageCommand"/> to create new message</param>
            <param name="cancellationToken">Cancellation token</param>
            <response code="204">Message was created successfully</response>
            <response code="400">Chat id or command model is incorrect. Also return if message with this content already exists</response>
            <response code="404">Chat was not found</response>
        </member>
        <member name="M:Presentation.Controllers.MessageController.GetMessages(System.String,System.Threading.CancellationToken)">
            <summary>
            Get all messages from a specific chat
            </summary>
            <param name="id">ID of a specific chat</param>
            <param name="cancellationToken">Cancellation token</param>
            <response code="200">Returns all messages from a specific chat</response>
            <response code="400">Chat id is incorrect</response>
            <response code="404">Chat was not found</response>
        </member>
        <member name="M:Presentation.Controllers.MessageController.GetRandomMessage(System.String,System.Threading.CancellationToken)">
            <summary>
            Get random message from a specific chat
            </summary>
            <param name="id">ID of a specific chat</param>
            <param name="cancellationToken">Cancellation token</param>
            <response code="200">Returns random message from a specific chat</response>
            <response code="400">Chat id is incorrect</response>
            <response code="404">Chat was not found</response>
        </member>
        <member name="M:Presentation.Controllers.MessageController.GetMessages(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get all messages of a certain type from a specific chat
            </summary>
            <param name="id">ID of a specific chat</param>
            <param name="category">Type of message</param>
            <param name="cancellationToken">Cancellation token</param>
            <response code="200">Returns messages of a certain type from a specific chat</response>
            <response code="400">Chat id or category is incorrect</response>
            <response code="404">Chat was not found</response>
        </member>
        <member name="M:Presentation.Controllers.MessageController.GetRandomMessage(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get random message of a certain type from a specific chat
            </summary>
            <param name="id">ID of a specific chat</param>
            <param name="category">Type of message</param>
            <param name="cancellationToken">Chat id is incorrect</param>
            <response code="200">Returns random message of a certain type from a specific chat</response>
            <response code="400">Chat id or category is incorrect</response>
            <response code="404">Chat was not found</response>
        </member>
        <member name="T:Presentation.Filters.CategoryValidationFilterAttribute">
            <summary>
            Filter to check category value is valid
            </summary>
        </member>
        <member name="P:Presentation.Filters.CategoryValidationFilterAttribute.RouteName">
            <summary>
            A route name of category value
            </summary>
        </member>
        <member name="M:Presentation.Filters.CategoryValidationFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Checking category value
            </summary>
            <param name="context">An action context</param>
        </member>
        <member name="M:Presentation.Filters.CategoryValidationFilterAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            After call action
            </summary>
            <param name="context">An action context</param>
        </member>
        <member name="T:Presentation.Filters.CustomExceptionsHandlingFilterAttribute">
            <summary>
            Exception filter to catch custom exceptions and return status codes
            </summary>
        </member>
        <member name="M:Presentation.Filters.CustomExceptionsHandlingFilterAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Catch custom exceptions and return status codes
            </summary>
            <param name="context">An exception context</param>
        </member>
        <member name="T:Presentation.Filters.IdValidationFilterAttribute">
            <summary>
            Filter to check id value is valid
            </summary>
        </member>
        <member name="P:Presentation.Filters.IdValidationFilterAttribute.RouteName">
            <summary>
            A route name of id value
            </summary>
        </member>
        <member name="M:Presentation.Filters.IdValidationFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Checking id value
            </summary>
            <param name="context">An action context</param>
        </member>
        <member name="M:Presentation.Filters.IdValidationFilterAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            After call action
            </summary>
            <param name="context">An action context</param>
        </member>
    </members>
</doc>
